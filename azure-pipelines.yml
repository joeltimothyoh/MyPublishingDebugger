trigger:
  branches:
    include:
    - '*'
  tags:
    include:
    - '*'
pr: none

resources:
  repositories:
  # - repository: PSModulePublisher
  #   type: github
  #   name: theohbrothers/PSModulePublisher
  #   endpoint: joeltimothyoh
  #   ref: refs/heads/dev
  - repository: PSGitHubRepositoryReleaser
    type: github
    name: theohbrothers/PSGitHubRepositoryReleaser
    endpoint: joeltimothyoh
    ref: refs/heads/dev

stages:
- stage: Build_Test_Publish
  displayName: Build, Test, Publish
  jobs:
  - job: Windows
    pool:
      vmImage: windows-2019
    steps:
    - checkout: self
      submodules: true
    # - template: azure-pipelines/windows/continuous-build.yml@PSModulePublisher
    # - template: azure-pipelines/common/run-publish.yml@PSModulePublisher
    - template: templates/azure-pipelines/repository/create-githubrelease.yml@PSGitHubRepositoryReleaser
    # - pwsh: |
    #       $ErrorActionPreference = 'Stop'
    #       Import-Module .\build\PSGitHubRestApi\src\PSGitHubRestApi\PSGitHubRestApi.psm1 -Force -Verbose
    #       ### Begin CI-specific code: Get the namspace and project name
    #       $matchInfo = $env:BUILD_SOURCEBRANCH | Select-String -Pattern '^refs\/tags\/(.*)'
    #       $BUILD_COMMIT_TAG = if ($matchInfo) { $matchInfo.Matches.Groups[1].Value } else { $null }
    #       $matchInfo = $env:BUILD_REPOSITORY_URI | Select-String -Pattern '^https:\/\/github.com\/(.*?)\/(.*)'
    #       $namespace = if ($matchInfo) { $matchInfo.Matches.Groups[1].Value } else { $null }
    #       $repository = if ($matchInfo) { $matchInfo.Matches.Groups[2].Value } else { $null }
    #       ### End of CI-specific code
    #       $commitSHA =  git rev-parse HEAD
    #       $allReleasesInfo = (git --no-pager log --tags --simplify-by-decoration --pretty="format:%H %d") -split "`n" | % {
    #           if ($_ -match '(\s+|\()tag:(\s+(v\d+\.\d+\.\d+)[),])') { $_ }
    #       }
    #       "All releases:" | Write-Host
    #       $allReleasesInfo | Write-Host
    #       $previousReleaseCommitSHA = ($allReleasesInfo[1] -split "\s")[0]
    #       "Previous release commit SHA: $previousReleaseCommitSHA" | Write-Host
    #       $releaseBody = git --no-pager log --pretty=format:"%h %s" "$previousReleaseCommitSHA...$commitSHA" | Out-String
    #       "Release body:" | Write-Host
    #       $releaseBody | Write-Host
    #       $releaseArgs = @{
    #           Namespace = $namespace
    #           Repository = $repository
    #           ApiKey = $env:GITHUB_API_KEY
    #           TagName = $env:BUILD_COMMIT_TAG
    #           TargetCommitish = $commitSHA
    #           Name = $env:BUILD_COMMIT_TAG
    #           Body = $releaseBody
    #           Draft = $false
    #           Prerelease = $false
    #       }
    #       $releaseArgsMasked = $releaseArgs.Clone()
    #       $releaseArgsMasked['ApiKey'] = "token *******"
    #       ($releaseArgsMasked | Out-String).Trim() | Write-Host
    #       if (!$env:BUILD_COMMIT_TAG) {
    #           throw "The environment variable '`$env:BUILD_COMMIT_TAG' is null. Not creating GitHub release."
    #       }
    #       New-GHRepositoryRelease @releaseArgs -Verbose > $nul
    #   env:
    #     GITHUB_API_KEY: $(GITHUB_API_KEY)
    #   condition: and(startsWith(variables['Build.SourceBranch'], 'refs/tags/'), ne(variables['MODULE_VERSION'], ''))
    #   displayName: Create GitHub Release
